
Puffy Smoke particle emitter

by Alexandre Labedade - alesk@alesk.fr

Puffy Smoke is a particle system with a special render setup which displays a fake volumetric smoke on classic billboard particles,
using a directional light as reference.
Its primary purpose is to emit smoke trails behind moving objects, but it can be used to also make clouds or any other smoke effect.

==============

Disclaimer and terms of usage :

By using this software you accept that you do so at your own risk.
Alexandre Labedade is not liable for any loss or damage of data as a result of use or misuse of this product.
Please remove this software if you are not happy with these conditions.

==============

How to use :

You need to define one or more emitters and at least one renderer to see something.

- Puffy_Emitter.cs : this script can be assigned on all objects emitting smoke or can be used on a single object as
  a main smoke emitter shared by multiples objects (spawners).
  It only generates particles data and doesn't render anything alone.

Single emitter case : (look at the "Simple Emitter" demo scene)
- Simply add the PuffyEmitter script to your emitter

Mesh emitter case : (look at the "Mesh Emitter" demo scene)
- Add the Puffy_Emitter script and the Puffy_Mesh Spawner script to your mesh emitter
The mesh emitter script will automatically detect its emitter if you doesn't define it manually

Multi emitter case : (look at the Homing missiles Multi Emitter demo scenes )
- Add the Puffy_Emitter script and the Puffy_MultiSpawner script (or your custom class extending it like Demo/Scripts/MissileLauncher.cs)
  to a GameObject
- Use the Puffy_ParticleSpawner script (or your custom class extending it like Demo/Scripts/HomingMissile.cs).
  Then add all the gameObjects using this script in the "Spawner List" of the Puffy_MultiSpawner script in the inspector, or do it
  by scripting with the

CreateSpawner() or MakeSpawner() methods (see MissileLauncher.cs or MultiSpawnerArray.cs for examples)

CreateSpawner() will create a new gameObject and return the instance of the Puffy_ParticleSpawner script attached to it.
MakeSpawner() will use an existing gameObject having a Puffy_ParticleSpawner (or extended) class assigned to it and will also
return the script instance.


- Puffy_Renderer.cs : this script will render the particles generated by the emitters.
It can be added to any gameObject in the scene, this has no real importance.

- The shaders can be found in the shaders list under the "Puffy_Smoke" category


To manually link an emitter to a renderer:

Drop the renderer gameObject to use in the "Renderer" parameter of the Puffy_Emitter gameObject inspector view.

OR

Drop the Puffy_Emitter gameObject in the "Emitters" list of the the Puffy_Renderer gameObject inspector view.



You can also do it by script :

first identify the Puffy_Renderer script with something like :

Puffy_Renderer theRendererScript = Puffy_Renderer.GetRenderer( "name_of_the_gameObject_holding_the_renderer_script" );

or :
Puffy_Renderer theRendererScript = Puffy_Renderer.GetRenderer( (int)index );

or if you have only one renderer in the scene :
Puffy_Renderer theRendererScript = Puffy_Renderer.GetFirstRenderer();

then :

theRendererScript.AddEmitter(theEmitterScript);


To unlink an emitter from a renderer :

theRendererScript.RemoveEmitter( "name_of_the_gameObject_holding_the_emitter_script" );
theRendererScript.RemoveEmitter( (int)index );
theRendererScript.RemoveEmitter( emitterScript );

==============

Scripts Parameters :


-- Puffy_Emitter --

- Use threads : toggle multi-threading for this emitter

- Assign to first renderer : this check box will auto assign the emitter to the first Puffy_Renderer found in the scene
- Renderer : if the previous check box is deactivated, select here a GameObject holding the renderer you want to use for this emitter.

- Freezed : particles updates will be stopped as long as this option is enabled.

- Unlimited particles : toggle this to define if this emitter can produce an infity of particles (until you computer dies)
or if you want to fix it to a maximum.

- Max particles count (only when Unlimited particles is off) : define here the mximum number of particles this emitter can produce.

- Warm up : when activated this option will pre-generate the specified number of particles, this can prevent small lags when generating particles on the fly while running the application.

- Auto Emit : the emitter will automatically spawn particles

- Particles/second : how many particles will be emitted each second.

- Sub particles : for all emitted particles, this value will defines how many will be "sub particles" :
a sub particle may have a shorter lifetime value, defined with "Sub lifetime factor".
This helps having a high density of particles while emitting, and get less particles aging... so less particles displayed.
- Sub lifetime factor : value from 0 to 1. 1 means 100% of the defined lifetime.
So you must use a value lower than one to get a benefit from this option
- Debug sub particles : this checkbox will override color parameters to see which particle are normal (magenta) and which are sub (yellow)

- Max gap : to get a continuous trail effect on fast moving objects, you can define a maximum gap distance between particles.
This will override the "particles per seconds" result if the distance between the emitted particles is higher than the defined gap value.
NOTE : if the particles count resulting from this operation is higher than 10 times the number of particles that would have been
produced otherwise, then the max gap distance is ignored and the emitted particles count is switched back to its original value.
This is a hard coded safety, to prevent too much particles to be generated at the same time, I'm still thinking on how to improve it.

- Particles chunk Size : number of particles available in the first place.
- Unlimited particles : if enabled, the particles count of the emitter will be unlimited. As soon as the limit is reached,
  it will be upped by the value of ChunkSize.

- Direction : vector defining the starting direction of the particle (normalized internally)
- Direction variation : values randomly added or substracted to the previous parameter.

- Life time : how long will live each particle, in seconds
- Life time variation : value randomly added or substracted to the previous parameter.
  (assume the same explanation for all other 'variation' parameters)

- Start speed : speed of the particle along its direction vector.

- Start size : size of the particle at its birth

- End size : size of the particle at its death

- Color source : how are colored the particles

Three choices are available for now :

BASIC :
- Start color / End Color : color of the particle at its birth and death.

MESH :
- The particles colors will be extracted from the vertices color info, if the mesh has no color info, basic colors will be used instead.

GRADIENT :
- A gradient class (Puffy_Gradient script) will automatically be added to the emitter, to let you define a more subtle gradient over
  the lifetime of the particles
- Gradient Life time : this value represents the life time of the gradient, according to the particles lifetime.
  For example, if the particles are living 5 seconds, and the gradient has a life time of 1, then it will be fully processed
  over the first second of life of the particle, and then the color will stay on the last gradient color key until the death
  of the particle.

The gradient is controlled by another script which will be automatically assigned to the gameObject and automatically enabled/disabled
if the color source is changed later.

- Luminosity : this curve allows to define the light intensity of the smoke (to simulate luminosity),
The curve keys should be in the 0s to 1s time range, as well as values between 0 and 1.
- Luminosity life time : works as the Gradient Life time parameters, and is displayed only when a gradient is not used, else the Gradient Life Time parameter will be used instead


-- Puffy_MeshSpawner --

- Emitter : the emitter script to use, will be automatically detected if attached to the same object
- Particle speed : emission speed of the particles
- Emit Every nth Point : 1 = emit a particle from each vertex of the mesh, 2 = emit every 2 vertices, etc...
- Smooth normals : for meshes with flat faces (like a cube) multiples normals are defined for a single vertex.
So this option will calculate the right average normal for each vertex, it should stay activated.


-- Puffy_Renderer --

Performances section :

- PassMode :
  * Auto : let the script decide, using the Update threshold value
  * One : will force everything to be computed in one frame
  * Multiple : will force every step to be done on multiples frames (3)

- Update threshold : time value used to split the render processing over multiples frames, if it takes too long to process in one frame.
- Faster depth Sorting : use the radix sort algorithm instead of the unity native sort function. The sorting is performed 2 times faster, but may use more memory.
- Use Thread : use all your cpu cores to process particles, should stay always ON. 
- Cores Setup : experimental feature, seems obsolete now, so I may remove it in a future update, leave it Maximum. (this value should NOT be changed at runtime)

- Particles per mesh : the maximum number of particles allowed for each mesh generated by the renderer. (this value should NOT be changed at runtime)
The values are : Minimum = 1024, Low = 2048, Medium = 4096,	High = 8192, Maximum = 16200
This should be set depending on the total number of particles you want to display at the same time.
Of course you're not limited by these numbers : if a mesh is completely filled, new ones will be created automatically to display the remaining particles.

- Sub mesh count : Each mesh has different data buffers to deal with varying number of particles.
The rule is : if the total count of displayed particles is varying a lot between low and high values while your application is running, more sub meshes may improve performances.
Else if the displayed particles count is relatively steady, then you'll be good with less sub meshes.

- Warm up : Will pregenerated meshes at program start instead of generating them on the fly while the program is running
- Warm up Mesh Count : how many mesh should be pregenerated

- Show Debug : display debug informations as an overlay in the game view
- Debug Mode : display simple or detailed debug informations


Aspect section :

- Light : the directional light used to define the faked volumetric lighting

- Use Ambient color : add the ambient light color defined in Edit / Render Settings to the particles colors
- Camera Background Color as Ambient Color : use the camera background color instead of the ambient color
- Ambient intensity : you can tweak the intensity of the ambient light color here.

- Material : the material used to render all the particles (See the predefined ones, PuffySmoke and PuffyCloud)
	
- Texture col count & Texture row count : value linked to the texture used
 (how many rows and columns are present on the texture, leave it with 8x8, unless you use another tilemap with different rows and columns counts)


Visibility section :

- Auto LOD option, exclude some particles from rendering based on the distance to the camera : 
  * every 4th particle with (distance - LODstartDistance) > (MaxRenderDistance - LODstartDistance)/4
  * and every 3rd particle with (distance - LODstartDistance) > (MaxRenderDistance - LODstartDistance)/3
  * and every 2nd particle with (distance - LODstartDistance) > (MaxRenderDistance - LODstartDistance)/2

- LOD start distance : starting distance for the LOD effect
- Max Render Distance : particles beyond this distance from the camera will not be rendered  

- Screensize Near Clipping : value from 0 to 4. This is the maximum percentage of screen space the particle is allowed to fill before starting to fade out (a value of 0 will hide all particles)
- Near clipping fade range : from 0 to 1. This is the range allowed to let the fade occur (also expressed in % of screen space), a value of 0 will pop out particles while 1 will fade them gradually.

- Emitters : list of the emitters linked to this renderer script (automatically updated at runtime if the emitters are in auto detection mode for the renderer or if their Renderer attribute is specified)



-----------------------------------------------------------



Shaders Options

- Shadow color : color of the shadowed side of the particles

- Particle Texture : this should always be one of the provided atlas textures with many spheres on it.
If you want to generate this texture by yourself, the order to respect is : left to right, bottom to top
the first sphere must be completely dark and the last completely bright.
The light is rotating over the sphere from behind to front (180°).
Here I've rendered a 8x8 tileset, but you're free to use less or more, but be sure to update the corresponding values in the Puffy_Render inspector.
I've provided 4 different textures, but I'm planning on including a tool to generate them on the fly and let the user tweak its generation.

--------------
- Use Start details : enable this to specify the texture tu use at the birth of each particle.
you must use a tileable grayscale texture of some perlin noise or any fractal like pattern you want in your smoke
Since version 1.13 you can use bot the Tiling and Offset parameters.
The Offset parameters is not really useful here, but the Tiling will define the scale of the texture in the smoke.

- Sharpness : to set the contrast of the texture, to get more sharp on smooth looks.
- Horizontal and vertical speed : the texture will move at the specified speed on both axis.
Since only billboards are rendered, this animation effect works in screen space only.

--------------
- Use end Details : same as "Use Start details", except that the texture when the particle is near the end of its lifetime.
If both start and end details textures are enabled, a cross fade will occur between them along the particle lifetime.

--------------

- Details density : define the density of the smoke, higher values means more opaque smoke
- Details Emissive density : density of the smoke on its luminous parts only

--------------
- Clouds mode : use it only for immortal particles used with clouds generators
- Details cross fading : when in cloud mode, the size of particle is used instead of age to drive the fading between "start" and "end" details texture
- Cross fading limit : this parameter defines the size transition point, to fade from "start" to "end" details texture, it's best to tweak it while displaying clouds to understand the effect
--------------

- Fade in : how much the particle will be transparent at birth.
- Opacity : global opacity of the smoke. It's important to keep this value below 0.5 (half of the slider width) to be sure to not see popping particles.

- Light Scattering : light transmission through smoke while it's spreading (older particle = wider spread = less shadow color)

- Use extra lights : when activated, up to 4 vertex lights will be taken in account to light the smoke.
- Extra light intensity : define the global intensity of vertex lights affecting the smoke, if set to 0 the vertex lights will be skipped and the smoke mesh will be computed faster



Some more precisions on Multi lights support :

Unity allows up to 4 vertex lights to be included in the lighting of the shader.
These lights are automaticaly detected according to their influence on the mesh (distance to the mesh bounding box, range, intensity)

You can change how much these lights are affecting the shader by using the "Extra light intensity" slider.
If this slider is set to 0, the multi-lights support will be disabled and the shader should be computed a little faster.
If disabled, this will also change the way the meshes are generated and give an extra boost in the script execution time.

Important notes about multi-lights support :
To get up to four lights affecting the smoke, you'll need to create a specific scene layer called "PuffySmoke".
Sine the directional lighting on the smoke is done in a custom manner, you must EXCLUDE this layer from every directional lights in your scene, to be sure they will not be taken in account by the shader.
This exclusion will automatically be done on the distant light assigned in the Puffy_Renderer script.
All generated meshes by the Puffy_Renderer script will detect this layer and be automatically assigned to it.
In some cases, if multi-lights support is used, you may see some z-fighting if multiple meshes are generated, I don't have a fix for that at the moment.


==============

History :
XX/XX/2015 - Version 1.13:

- Switch to Unity 4.3.0
- New unified multi-compile shader for smoke and clouds, with more options
- Unity Threading Helper replaced by ThreadPool class : same speed performances, less (no more?) GC hick-ups \o/
- Switching off Unlimited particle now displays a Max particles count value. This number of particles will be preallocated in memory.
- Bug fix : when disabling threads, a wrong number of particles where used when too many of them were present
- The "Use Threads" checkbox is back on the Puffy_Emitter script, since it may be useful to be able to disable it on some mobile devices.
- Tweak on the maximum Mesh Face count value to prevent max vertices allocation error, this parameter has also been renamed as "Particles per mesh"
- Some corrections in the Cloud Shader : the sharpness parameter wasn't properly applied
- Presets added in the editor menu "GameObject/Create Other/Puffy Smoke", note that you'll have to manually set the Light and Material to be used by the Puffy Renderer
- Disabling a Puffy_Emitter script or its GameObject will now hide all related particles from the Puffy_Renderer script
- Some memory optimizations
- Readme file updates to reflect all changes.

* Puffy_Renderer script *
New features :
- New parameter "Ambient intensity" to control how much the ambient color affect the particles
- New parameter "LOD start distance" defines the start point for the Auto LOD option. So the LOD effect will happend between this point and the "Max render distance" value
- Threaded optimization added on the mesh build function
- Small performance improvements on the Frustum Check.
- Puffy_Renderer script : "Sub mesh count" parameter added, to tweak the internal split of mesh data in order to optimize the amount of data sent to the gpu when a big face count is defined and few particles are visible. (higher value = more sub meshes = more memory comsuption)
- Puffy_Renderer script : "Warm up" and "Warm up mesh count" added, to pre-build meshes and define how many are needed at start (good for mobile).

Changes and bug fixes :
- Cores Setup restricted to values Medium/High/Maximum, since lower values may lead to crash when dealing with a huge count of particles.
- Screensize near clipping max value raised to 4
- The Ambient color parameter state was affecting all renderers at once, it's now properly working individually on each one.


* Puffy_Emitter script *
New features :
- Puffy_Emitter script : when "Assign to first renderer" is off, a "Renderer" input is displayed to pick the Puffy_Renderer to use with this emitter
- Puffy_Emitter script : if no renderer is assigned to the emitter, gizmos wire spheres will be displayed for each particle
- Puffy_Emitter script : Warm up added, to pre-fill the particles array

Changes and bug fixes :
- The "Direction" vector is now normalized before being applied to the particles motion
- "Auto assign to renderer" renamed to "Assign to first renderer", and "Auto assign to" input removed
- Internal changes to support multiple ShapeSpawners or MultiSpawners at the same time
- Gradient End Time parameter moved to the Puffy_Gradient script
- Bug fix in the particles recycling process (wasn't really noticeable, but needed to be fixed)
- Particles are now stored in a List instead of an Array, allowing more internal flexibility and no real performance hit
- The "chunk size" parameter is no more needed and has been removed


* Puffy_Cloud script *
New feature : OnDestroy method added to remove particles when the cloud gameobject is deleted


* Puffy_MultiSpawner script *
Bug fix : the Max Gap setting processing (taken from the emitter) for fast moving objects was not working properly


- Shaders :
Bug fixes :
- Scattering effect was not computed properly, and this parameter is renamed to "Light Scattering" to be more relevant.
- Fog is now properly handled

New features :
- Multiple lights support ! :)
- Perlin Cloud demo script + 3D Perlin Noise class


22/02/2014 - Version 1.12:

- First iteration of mobile support (iOS & Android) \o/
 IMPORTANT : depending on your mobile hardware (problem found on Android devices) you may have to disable the "Use Threads" option to improve performances.
 I'm trying to figure out what's the problem here...
 
- Many shaders optimizations
- Fake volumetric textures modified to be square images
- Default internal ambient color set to black

- Materials clean up, now you have 3 materials with different qualities :
  * "PuffySmoke Low" : no details, only the base volumetric effect. This shader is recommended for mobile gpu !
  * "PuffySmoke Medium" : 1 texture allowed for details
  * "PuffySmoke High" : 2 textures allowed for details, the first is displayed at the particle birth, and gradually fade to the second until the particle death.
  
  Note : All shaders are working on mobile gpu, but those with details textures may have poor performances

Changes in the Puffy_Render Script :

- Auto LOD option, exclude some particles from rendering based on distance to camera : 
  * every 4th particle with distance > MaxRenderDistance/4
  * and every 3rd particle with distance > MaxRenderDistance/3
  * and every 2d particle with distance > MaxRenderDistance/2
  
- NearClipping + fading to fix fillrate issues on low gpu :
  * Screensize Near Clipping : value from 0 to 2, is the maximum % of screen space the particle is allowed to fill before starting to fade out (a value of 0 will hide all particles)
  * Near clipping fade range : from 0 to 1, is the range allowed to let the fade occur (also expressed in % of screen space), a value of 0 will pop out particles while 1 will fade them gradually
  

- ForceOnePass removed and replaced by PassMode, now you can specify how the processing is spread over frames :
  * Auto : let the script decided, using the Update threshold value
  * One : will force everything to be done in one frame
  * Multiple : will force every step to be done on multiples frames (3)

- Render checkbox no more needed (disable the script instead)
- Inspector clean up

04/12/2013 - Version 1.11:

- Bug fix and code optimization in the particle emitter for the particles recycling
- Some tweaks in the particles renderer, to improve performances on low hardware
- Particles can now be immortal (set lifeTime to -1)
- The particles age is no longer stored in the color alpha channel, so now the alpha can be modified within the color gradient
- Particles can now have a Luminosity value, the homing missiles demo is updated with this new parameter
- Position variation added to the particle emitter, this allows a random position offset on particles spawning
- Multi threads added for meshes data generation and part of the meshes updates
- New clouds demo added, with a dedicated shader
- Project exported from Unity 4.0.0f7, since it's the minimal version to get it to work

IMPORTANT NOTE: The new clouds stuff is still a work in progress, it will change in the future updates.

25/10/2013 - Versions 1.08 to 1.10:

- Rewrite of the particle emitter process to get a particle per seconds rate, working properly with any TimeScale value
- Code simplification and new emitter classes to inherit from (mesh or multi emitter).
- "Trail mode" removed (no longer needed), and replaced by the "Max gap" value
- New demo scenes.

12/10/2013 - Version 1.07:

- Added "Auto Assign" option on the emitter script, to let it find a renderer
- Added "Assign to renderer name" on the emitter script, to specifiy which renderer must be used if multiple are available.
  If the name is left empty, the first renderer found will be used.

15/09/2013 - Version 1.06:

- Speed improvements : almost x2 on the benchmark scene with 50k particles
- MaxRenderDistance added to the Puffy_Renderer script
- Tweak on the shader to cast raw shadows on other objects (no self shadowing).
- Added the intermediateRatio parameter to the SpawnRow function in the Puffy_Emitter class

07/09/2013 - Version 1.05:

- Speed improvements on the meshes rebuilding and updates (+50% speed for this part)
- Tweaks in the shader on the details animation parameter
- New material + new texture for a first attempt at making a cartoon smoke look (not convincing yet)
- New parameters on the homing missile script (craziness and some random offsets tweaks)

03/09/2013 - Version 1.04:

- Speed improvements : overall refresh rate multiplied by around 3
- Some changes in the smoke color of the missiles demo (end color = start color, instead of white)
- Launch count added to the missile launcher script
- Some corrections in this readme file

27/08/2013 - Version 1.03:

- Tint color as been removed from the shader
- Changes on the shader and lighting options : the smoke now reacts to the light color and intensity,
  and to the scene ambient light color
- Two new parameters in Puffy_Renderer : "Use Ambient color" and "Camera Background Color as Ambient Color"

26/08/2013 - Version 1.02:

- Cleanup in the package (old test files were included)


26/08/2013 - Version 1.01:

- Homing missile demo updated with cleaner code


21/08/2013 - Version 1.0:

- First pupblic release.



==============

TODO List :

- Work on a DX11 version whith compute shaders
- Add more textures and demo scenes
